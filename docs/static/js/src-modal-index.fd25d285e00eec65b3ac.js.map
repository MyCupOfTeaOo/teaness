{"version":3,"sources":["D:/zouwendi/01projectFiles/teaness/src/Modal/index.mdx","D:/zouwendi/01projectFiles/teaness/src/Modal/index.tsx"],"names":["layoutProps","MDXLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","this","Playground","Props","Button","Modal","__codesandbox","onClick","info","title","onOk","Promise","resolve","setTimeout","open","of","isMDXComponent","ModalComponent","params","div","document","createElement","isCancel","args2","onCancel","args","render","visible","destory","ReactDOM","unmountComponentAtNode","parentNode","removeChild","body","appendChild","context","AModal","error","centered","success","confirm","warning"],"mappings":"6gBAeMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACH,EAAD,iBAAeD,EAAiBI,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,iBAAQ,CACN,GAAM,2BADR,6BAGA,iBAAQ,CACN,GAAM,uCADR,yCAGA,oCAAS,+BAAGC,WAAW,KAAQ,CAC3B,KAAQ,4CADH,cAAT,2FAGA,YAAC,aAAD,CAAYC,WAAY,EAAGC,OAAQ,0aAAsUC,QAAS,CAChXL,MAAOM,KAAOA,KAAKN,MAAQA,EAC3BO,wBACAC,cACAC,WACAC,WACCC,cAAa,YAAeV,QAAQ,cACzC,YAAC,IAAD,CAAQW,QAAS,kBAAMF,IAAMG,KAAK,CAC5BC,MAAO,mBACPC,KAAM,kBAAM,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,YAAW,kBAAMD,MAAW,YAC7DhB,QAAQ,UAHhB,QAPE,wJAYF,YAAC,IAAD,CAAQW,QAAS,kBAAMF,IAAMS,KAAK,CAC5BL,MAAO,sBACLb,QAAQ,UAFhB,SAIE,iBAAQ,CACN,GAAM,0BADR,4BAGA,YAAC,QAAD,CAAOmB,GAAIV,IAAOT,QAAQ,W,2KAK9BH,EAAWuB,gBAAiB,G,uwCC/CrB,SAASF,EACdG,EACAC,GAEA,IAAMC,EAAMC,SAASC,cAAc,OAC/BC,GAAW,EAEf,SAASZ,IAAuB,IAAD,uBAAda,EAAc,yBAAdA,EAAc,gBACzBL,EAAOR,MAAMQ,EAAOR,KAAKa,GAC7BC,IAEF,SAASA,IAA0B,IAAD,uBAAbC,EAAa,yBAAbA,EAAa,gBAKhC,OAJIP,EAAOM,UAAUN,EAAOM,SAASC,GAErCC,EAAO,EAAD,GAAMR,EAAN,CAAcM,WAAUd,OAAMiB,SAAS,KAC7CL,GAAW,EACJ,IAAIX,SAAQ,SAAAC,GAAO,OACxBC,YAAW,WACTe,IACAhB,GAAQ,KACP,QAGP,SAASgB,IACHN,EACoBO,IAASC,uBAAuBX,IACjCA,EAAIY,YACvBZ,EAAIY,WAAWC,YAAYb,GAG7BK,IAGJ,SAASE,EAAO/B,GACdkC,IAASH,OAAO,kBAACT,EAAmBtB,GAAWwB,GAGjD,OA/BAC,SAASa,KAAKC,YAAYf,GA8B1BO,EAAO,EAAD,GAAMR,EAAN,CAAcM,WAAUd,OAAMiB,SAAS,KACtC,CACLD,SACAF,WACAI,W,yKAIEvB,E,YAIJ,WAAYV,EAAmBwC,GAAc,qEACrCxC,EAAOwC,I,2BALGC,KAAd/B,EACGS,KAAO,SAACnB,GAAD,OACZmB,EAAKT,EAAOV,IAOhBU,EAAMgC,MAAQ,SAAA1C,GAAK,OAAIyC,IAAOC,MAAP,GAAeC,UAAU,GAAS3C,KACzDU,EAAMkC,QAAU,SAAA5C,GAAK,OAAIyC,IAAOG,QAAP,GAAiBD,UAAU,GAAS3C,KAC7DU,EAAMmC,QAAU,SAAA7C,GAAK,OAAIyC,IAAOI,QAAP,GAAiBF,UAAU,GAAS3C,KAC7DU,EAAMoC,QAAU,SAAA9C,GAAK,OAAIyC,IAAOK,QAAP,GAAiBH,UAAU,GAAS3C,KAE9CU,M","file":"static/js/src-modal-index.455220fe.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport {Button} from 'antd';\nimport 'antd/dist/antd.css';\nimport Modal from './';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"modal模态窗\"\n    }}>{`Modal(模态窗)`}</h1>\n    <h2 {...{\n      \"id\": \"基本用法basic-usage\"\n    }}>{`基本用法(Basic usage)`}</h2>\n    <p>{`参考`}<a parentName=\"p\" {...{\n        \"href\": \"https://ant.design/components/modal-cn/\"\n      }}>{`antd modal`}</a>{`(注:只是浮动位置默认改成了居中)`}</p>\n    <Playground __position={0} __code={'<Button\\n  onClick={() =>\\n    Modal.info({\\n      title: \\'这是info\\',\\n      onOk: () => new Promise(resolve => setTimeout(() => resolve(), 2000)),\\n    })\\n  }\\n>\\n  info\\n</Button>\\n区别与antd的组件 open,但是open 不支持 onCancel return promise\\n显示loading那种方法\\n<Button onClick={() => Modal.open({ title: \\'这是info\\' })}>info</Button>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Button,\n      Modal\n    }} __codesandbox={`undefined`} mdxType=\"Playground\">\n  <Button onClick={() => Modal.info({\n        title: \"这是info\",\n        onOk: () => new Promise(resolve => setTimeout(() => resolve(), 2000))\n      })} mdxType=\"Button\">info</Button>\n  区别与antd的组件 open,但是open 不支持 onCancel return promise 显示loading那种方法\n  <Button onClick={() => Modal.open({\n        title: \"这是info\"\n      })} mdxType=\"Button\">info</Button>\n    </Playground>\n    <h2 {...{\n      \"id\": \"属性properties\"\n    }}>{`属性(Properties)`}</h2>\n    <Props of={Modal} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","import { Modal as AModal } from 'antd';\nimport { ModalProps } from 'antd/lib/modal';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\ninterface OpenBase {\n  visible?: boolean;\n  onCancel?: (...args: any[]) => void | Promise<any>;\n  onOk?: (...args: any[]) => void | Promise<any>;\n}\n\nexport function open<T extends OpenBase>(\n  ModalComponent: React.ComponentType<T>,\n  params: T,\n) {\n  const div = document.createElement('div');\n  let isCancel = false;\n  document.body.appendChild(div);\n  function onOk(...args2: any[]) {\n    if (params.onOk) params.onOk(args2);\n    onCancel();\n  }\n  function onCancel(...args: any[]) {\n    if (params.onCancel) params.onCancel(args);\n\n    render({ ...params, onCancel, onOk, visible: false });\n    isCancel = true;\n    return new Promise(resolve =>\n      setTimeout(() => {\n        destory();\n        resolve(true);\n      }, 200),\n    );\n  }\n  function destory() {\n    if (isCancel) {\n      const unmountResult = ReactDOM.unmountComponentAtNode(div);\n      if (unmountResult && div.parentNode) {\n        div.parentNode.removeChild(div);\n      }\n    } else {\n      onCancel();\n    }\n  }\n  function render(props: T) {\n    ReactDOM.render(<ModalComponent {...props} />, div);\n  }\n  render({ ...params, onCancel, onOk, visible: true });\n  return {\n    render,\n    onCancel,\n    destory,\n  };\n}\n\nclass Modal extends AModal {\n  static open = (props: ModalProps & { children?: React.ReactNode }) =>\n    open(Modal, props);\n\n  constructor(props: ModalProps, context: {}) {\n    super(props, context);\n  }\n}\n\nModal.error = props => AModal.error({ centered: true, ...props });\nModal.success = props => AModal.success({ centered: true, ...props });\nModal.confirm = props => AModal.confirm({ centered: true, ...props });\nModal.warning = props => AModal.warning({ centered: true, ...props });\n\nexport default Modal;\n"],"sourceRoot":""}