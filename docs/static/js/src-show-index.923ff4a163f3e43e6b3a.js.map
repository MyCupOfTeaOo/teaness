{"version":3,"sources":["D:/zouwendi/01projectFiles/teaness/src/Show/Switch.tsx","D:/zouwendi/01projectFiles/teaness/src/Show/index.tsx","D:/zouwendi/01projectFiles/teaness/src/Show/index.mdx"],"names":["Case","props","Fragment","children","Switch","actual","position","React","Children","map","child","expect","lodash","isFunction","isRegExp","test","Array","isArray","some","item","Show","show","useMemo","undefined","layoutProps","MDXLayout","MDXContent","components","mdxType","__position","__code","__scope","this","Playground","Props","Button","__codesandbox","of","isMDXComponent"],"mappings":"0/BAkBO,IAAMA,EAA4B,SAAAC,GACvC,OAAO,kBAAC,IAAMC,SAAP,KAAiBD,EAAME,W,qaAehC,IAAMC,EAEF,SAAAH,GAAU,IACJI,EAAqBJ,EAArBI,OAAQC,EAAaL,EAAbK,SAEVH,EAAWI,IAAMC,SAASC,IAC9BR,EAAME,UACN,SAACO,GACC,KAAI,OAACA,QAAD,IAACA,OAAD,EAACA,EAAOT,OACV,OAAOS,EAF+B,IAIhCC,EAAWD,EAAMT,MAAjBU,OACR,OAAIC,IAAOC,WAAWF,GACbA,EAAON,GAAUK,EAAQJ,EAE9BM,IAAOE,SAASH,GACXA,EAAOI,KAAKV,GAAiBK,EAAQJ,EAE1CU,MAAMC,QAAQN,GACTA,EAAOO,MAAK,SAAAC,GAAI,OAAIA,IAASd,KAAUK,EAAQJ,EAEjDK,IAAWN,EAASK,EAAQJ,KAGvC,OAAO,kBAAC,IAAMJ,SAAP,KAAiBC,IAG1BC,EAAOJ,KAAOA,EAECI,Q,wZClCf,IAAMgB,EAA4B,SAAAnB,GAAU,IAClCU,EAA6BV,EAA7BU,OAAQN,EAAqBJ,EAArBI,OAAQC,EAAaL,EAAbK,SAClBe,EAAOC,mBAAQ,WACnB,YAAeC,IAAXZ,IAGAC,IAAOC,WAAWF,GACbA,EAAON,GAEZO,IAAOE,SAASH,GACXA,EAAOI,KAAKV,GAEjBW,MAAMC,QAAQN,GACTA,EAAOO,MAAK,SAAAC,GAAI,OAAIA,IAASd,KAE/BM,IAAWN,KACjB,CAACM,EAAQN,IACZ,OAAO,kBAAC,IAAMH,SAAP,KAAiBmB,EAAOpB,EAAME,SAAWG,I,kWAKnCc,Q,4MCzCf,IAKMI,EAAc,GAGdC,EAAY,UACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACG1B,EACF,8BACD,OAAO,YAACwB,EAAD,iBAAeD,EAAiBvB,EAAhC,CAAuC0B,WAAYA,EAAYC,QAAQ,cAE5E,iBAAQ,CACN,GAAM,oBADR,sBAGA,uEACA,iBAAQ,CACN,GAAM,uCADR,yCAGA,YAAC,aAAD,CAAYC,WAAY,EAAGC,OAAQ,qHAA6FC,QAAS,CACvI9B,MAAO+B,KAAOA,KAAK/B,MAAQA,EAC3BgC,wBACAC,cACAC,WACAf,OACAhB,UACCgC,cAAa,YAAeR,QAAQ,cACzC,YAAC,EAAD,CAAMvB,OAAQ,EAAGM,OAAQ,EAAGiB,QAAQ,QAApC,gBAGA,YAAC,EAAD,CAAMvB,OAAQ,EAAGM,OAAQ,EAAGiB,QAAQ,QAApC,uBAIE,iBAAQ,CACN,GAAM,0BADR,4BAGA,YAAC,QAAD,CAAOS,GAAIjB,EAAMQ,QAAQ,UACzB,iBAAQ,CACN,GAAM,kCADR,oCAGA,4FACA,iBAAQ,CACN,GAAM,yCADR,yCAGA,YAAC,aAAD,CAAYC,WAAY,EAAGC,OAAQ,mJAA2HC,QAAS,CACrK9B,MAAO+B,KAAOA,KAAK/B,MAAQA,EAC3BgC,wBACAC,cACAC,WACAf,OACAhB,UACCgC,cAAa,YAAeR,QAAQ,cACzC,YAAC,EAAD,CAAQvB,OAAQ,EAAGuB,QAAQ,UACzB,YAAC,EAAO5B,KAAR,CAAaW,OAAQ,GAArB,gBACA,YAAC,EAAOX,KAAR,CAAaW,OAAQ,GAArB,wBAGA,iBAAQ,CACN,GAAM,4BADR,4BAGA,YAAC,QAAD,CAAO0B,GAAIjC,EAAQwB,QAAQ,W,0KAK/BF,EAAWY,gBAAiB","file":"static/js/src-show-index.4338c2fa.js","sourcesContent":["import React from 'react';\nimport lodash from 'lodash-es';\n\nexport type Value =\n  | string\n  | boolean\n  | number\n  | undefined\n  | null\n  | React.ReactNode;\n\nexport interface CaseProps {\n  /**\n   * 预期值\n   */\n  expect?: Value | Value[] | RegExp | ((actual?: Value) => boolean);\n}\n\nexport const Case: React.FC<CaseProps> = props => {\n  return <React.Fragment>{props.children}</React.Fragment>;\n};\n\nexport interface SwitchProps {\n  /**\n   * 实际值\n   */\n  actual?: Value;\n  /**\n   * 占位\n   */\n  position?: React.ReactNode;\n  children?: React.ReactNode | React.ReactNode[];\n}\n\nconst Switch: React.FC<SwitchProps> & {\n  Case: typeof Case;\n} = props => {\n  const { actual, position } = props;\n\n  const children = React.Children.map(\n    props.children as any,\n    (child: React.ReactElement<CaseProps>) => {\n      if (!child?.props) {\n        return child;\n      }\n      const { expect } = child.props;\n      if (lodash.isFunction(expect)) {\n        return expect(actual) ? child : position;\n      }\n      if (lodash.isRegExp(expect)) {\n        return expect.test(actual as any) ? child : position;\n      }\n      if (Array.isArray(expect)) {\n        return expect.some(item => item === actual) ? child : position;\n      }\n      return expect === actual ? child : position;\n    },\n  );\n  return <React.Fragment>{children}</React.Fragment>;\n};\n\nSwitch.Case = Case;\n\nexport default Switch;\n","import React, { useMemo } from 'react';\nimport lodash from 'lodash';\n\nimport Switch from './Switch';\n\ntype Value =\n  | string\n  | boolean\n  | number\n  | undefined\n  | null\n  | Function\n  | React.ReactNode;\n\nexport interface ShowProps {\n  /**\n   * 预期值\n   */\n  expect?: Value | Value[] | ((actual?: Value) => boolean) | RegExp;\n  /**\n   * 实际值\n   */\n  actual?: Value;\n  /**\n   * 占位\n   */\n  position?: React.ReactNode;\n}\n\nconst Show: React.FC<ShowProps> = props => {\n  const { expect, actual, position } = props;\n  const show = useMemo(() => {\n    if (expect === undefined) {\n      return true;\n    }\n    if (lodash.isFunction(expect)) {\n      return expect(actual);\n    }\n    if (lodash.isRegExp(expect)) {\n      return expect.test(actual as any);\n    }\n    if (Array.isArray(expect)) {\n      return expect.some(item => item === actual);\n    }\n    return expect === actual;\n  }, [expect, actual]);\n  return <React.Fragment>{show ? props.children : position}</React.Fragment>;\n};\n\nexport { Switch, Show };\n\nexport default Show;\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Button } from 'antd';\nimport 'antd/dist/antd.css';\nimport Show, { Switch } from '.';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"show显示\"\n    }}>{`Show(显示)`}</h1>\n    <p>{`控制 children 是否显示`}</p>\n    <h2 {...{\n      \"id\": \"基本用法basic-usage\"\n    }}>{`基本用法(Basic usage)`}</h2>\n    <Playground __position={0} __code={'<Show actual={0} expect={0}>\\n  显示\\n</Show>\\n<Show actual={0} expect={1}>\\n  不显示\\n</Show>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Button,\n      Show,\n      Switch\n    }} __codesandbox={`undefined`} mdxType=\"Playground\">\n  <Show actual={0} expect={0} mdxType=\"Show\">\n    显示\n  </Show>\n  <Show actual={0} expect={1} mdxType=\"Show\">\n    不显示\n  </Show>\n    </Playground>\n    <h2 {...{\n      \"id\": \"属性properties\"\n    }}>{`属性(Properties)`}</h2>\n    <Props of={Show} mdxType=\"Props\" />\n    <h1 {...{\n      \"id\": \"switch匹配显示\"\n    }}>{`Switch(匹配显示)`}</h1>\n    <p>{`根据 Switch.Case 组件的匹配显示`}</p>\n    <h2 {...{\n      \"id\": \"基本用法basic-usage-1\"\n    }}>{`基本用法(Basic usage)`}</h2>\n    <Playground __position={2} __code={'<Switch actual={0}>\\n  <Switch.Case expect={0}>显示</Switch.Case>\\n  <Switch.Case expect={1}>不显示</Switch.Case>\\n</Switch>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Button,\n      Show,\n      Switch\n    }} __codesandbox={`undefined`} mdxType=\"Playground\">\n  <Switch actual={0} mdxType=\"Switch\">\n    <Switch.Case expect={0}>显示</Switch.Case>\n    <Switch.Case expect={1}>不显示</Switch.Case>\n  </Switch>\n    </Playground>\n    <h2 {...{\n      \"id\": \"属性properties-1\"\n    }}>{`属性(Properties)`}</h2>\n    <Props of={Switch} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}