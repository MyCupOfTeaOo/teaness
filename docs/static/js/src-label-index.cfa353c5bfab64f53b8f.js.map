{"version":3,"sources":["D:/zouwendi/01projectFiles/teaness/src/Grid/Col.tsx","D:/zouwendi/01projectFiles/teaness/src/Grid/Context.ts","D:/zouwendi/01projectFiles/teaness/src/Grid/Row.tsx","D:/zouwendi/01projectFiles/teaness/src/Grid/index.ts","D:/zouwendi/01projectFiles/teaness/src/Label/Context.ts","D:/zouwendi/01projectFiles/teaness/src/Label/LabelRow.tsx","D:/zouwendi/01projectFiles/teaness/src/Label/index.mdx","D:/zouwendi/01projectFiles/teaness/src/Label/index.tsx"],"names":["Col","props","context","useContext","RowContext","colProps","React","createContext","Row","rest","Provider","value","LabelRowContext","LabelRow","labelFloat","layoutProps","MDXLayout","MDXContent","components","mdxType","of","Label","__position","__code","__scope","this","Playground","Props","Input","__codesandbox","text","parentName","type","align","label","span","children","isMDXComponent","labelRowContext","id","useMemo","uniqueId","float","sizeClass","size","target","style","display","labelStyle","title","htmlFor","className","classnames","required","undefined","Children","map","child","cloneElement","Fragment","paddingTop","paddingBottom","childrenStyle","defaultProps","memo"],"mappings":"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","file":"static/js/src-label-index.71086682.js","sourcesContent":["import React, { useContext } from 'react';\nimport { Col as AntCol } from 'antd';\nimport { ColProps } from './typings';\nimport { RowContext } from './Context';\n\nconst Col: React.FC<ColProps> = props => {\n  const context = useContext(RowContext);\n  return <AntCol {...context.colProps} {...props} />;\n};\n\nexport default Col;\n","import React from 'react';\nimport { ColProps } from './typings';\n\nexport const RowContext = React.createContext<{ colProps?: ColProps }>({});\n","import React from 'react';\nimport { Row as AntRow } from 'antd';\nimport { RowProps } from './typings';\nimport { RowContext } from './Context';\n\nconst Row: React.FC<RowProps> = props => {\n  const { colProps, ...rest } = props;\n  return (\n    <RowContext.Provider\n      value={{\n        colProps,\n      }}\n    >\n      <AntRow {...rest} />\n    </RowContext.Provider>\n  );\n};\n\nexport default Row;\n","import Col from './Col';\nimport Row from './Row';\n\nexport { Row, Col };\n","import React from 'react';\nimport { LabelProps } from './typings';\n\nexport const LabelRowContext = React.createContext<{\n  colProps?: LabelProps['colProps'];\n  labelFloat?: LabelProps['float'];\n}>({});\n","import React from 'react';\nimport { Row } from '../Grid';\nimport { LabelRowProps } from './typings';\nimport { LabelRowContext } from './Context';\n\nconst LabelRow: React.FC<LabelRowProps> = props => {\n  const { colProps, labelFloat, ...rest } = props;\n  return (\n    <LabelRowContext.Provider value={{ colProps, labelFloat }}>\n      <Row {...rest} />\n    </LabelRowContext.Provider>\n  );\n};\n\nexport default LabelRow;\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { Input } from 'antd';\nimport 'antd/dist/antd.css';\nimport { Label } from './';\nimport Col from '../Grid/Col';\nimport LabelRow from './LabelRow';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"label\"\n    }}>{`Label`}</h1>\n    <h2 {...{\n      \"id\": \"属性properties\"\n    }}>{`属性(Properties)`}</h2>\n    <Props of={Label} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"基本用法basic-usage\"\n    }}>{`基本用法(Basic usage)`}</h2>\n    <Playground __position={1} __code={'<Label text=\\\"姓名1\\\">\\n  <Input />\\n</Label>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Input,\n      Label,\n      Col,\n      LabelRow\n    }} __codesandbox={`undefined`} mdxType=\"Playground\">\n  <Label text=\"姓名1\" mdxType=\"Label\">\n    <Input mdxType=\"Input\" />\n  </Label>\n    </Playground>\n    <h1 {...{\n      \"id\": \"labelrow\"\n    }}>{`LabelRow`}</h1>\n    <h2 {...{\n      \"id\": \"属性properties-1\"\n    }}>{`属性(Properties)`}</h2>\n    <p>{`可以透传 label 的 colProps 与 labelFloat 属性\n其他属性参考 `}<a parentName=\"p\" {...{\n        \"href\": \"../Grid#Row\"\n      }}>{`Row`}</a></p>\n    <h2 {...{\n      \"id\": \"基本用法basic-usage-1\"\n    }}>{`基本用法(Basic usage)`}</h2>\n    <Playground __position={2} __code={'<LabelRow\\n  type=\\\"flex\\\"\\n  align=\\\"middle\\\"\\n  labelFloat=\\\"right\\\"\\n  colProps={{ label: { span: 4 }, children: { span: 4 } }}\\n>\\n  <Label text=\\\"输入框1\\\">\\n    <Input />\\n  </Label>\\n  <Label text=\\\"输入框2\\\">\\n    <Input />\\n  </Label>\\n  <Col span={24}>\\n    <LabelRow\\n      type=\\\"flex\\\"\\n      align=\\\"middle\\\"\\n      labelFloat=\\\"right\\\"\\n      colProps={{ label: { span: 4 }, children: { span: 4 } }}\\n    >\\n      <Label text=\\\"输入框3\\\">\\n        <Input />\\n      </Label>\\n    </LabelRow>\\n  </Col>\\n</LabelRow>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Input,\n      Label,\n      Col,\n      LabelRow\n    }} __codesandbox={`undefined`} mdxType=\"Playground\">\n  <LabelRow type=\"flex\" align=\"middle\" labelFloat=\"right\" colProps={{\n        label: {\n          span: 4\n        },\n        children: {\n          span: 4\n        }\n      }} mdxType=\"LabelRow\">\n    <Label text=\"输入框1\" mdxType=\"Label\">\n      <Input mdxType=\"Input\" />\n    </Label>\n    <Label text=\"输入框2\" mdxType=\"Label\">\n      <Input mdxType=\"Input\" />\n    </Label>\n    <Col span={24} mdxType=\"Col\">\n      <LabelRow type=\"flex\" align=\"middle\" labelFloat=\"right\" colProps={{\n            label: {\n              span: 4\n            },\n            children: {\n              span: 4\n            }\n          }} mdxType=\"LabelRow\">\n        <Label text=\"输入框3\" mdxType=\"Label\">\n          <Input mdxType=\"Input\" />\n        </Label>\n      </LabelRow>\n    </Col>\n  </LabelRow>\n    </Playground>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","import React, { useMemo, memo, useContext } from 'react';\nimport classnames from 'classnames';\nimport { uniqueId } from 'lodash-es';\nimport './index.scss';\nimport { Col } from '../Grid';\nimport { LabelProps, FloatSize } from './typings';\nimport { LabelRowContext } from './Context';\nimport LabelRow from './LabelRow';\n\nconst Label: React.FC<LabelProps> = props => {\n  const labelRowContext = useContext(LabelRowContext);\n  const id = useMemo(() => uniqueId('label'), []);\n  const colProps = props.colProps || labelRowContext.colProps;\n  const float = props.float || labelRowContext.labelFloat;\n  const text = useMemo(() => {\n    const sizeClass: {\n      [key: string]: any;\n    } = {};\n    if (typeof float === 'object') {\n      for (const size of ['xs', 'sm', 'md', 'lg', 'xl', 'xxl']) {\n        const target = (float as FloatSize)[size as keyof FloatSize];\n        if (target) sizeClass[`label-${size}-${target}`] = true;\n      }\n    } else {\n      sizeClass[`label-${float}`] = float;\n    }\n\n    return props.text ? (\n      <Col\n        style={{\n          display: 'flex',\n          ...props.labelStyle,\n        }}\n        {...(colProps ? colProps.label : {})}\n      >\n        <label\n          title={props.text}\n          htmlFor={id}\n          className={classnames(\n            'tea-label',\n            props.className,\n            {\n              'label-required': props.required,\n            },\n            sizeClass,\n          )}\n        >\n          {props.text} :\n        </label>\n      </Col>\n    ) : (\n      undefined\n    );\n  }, [\n    props.text,\n    props.className,\n    props.required,\n    float,\n    colProps,\n    props.labelStyle,\n    labelRowContext.colProps,\n  ]);\n  const children = useMemo(\n    () =>\n      React.Children.map(props.children, child => {\n        return React.cloneElement(child as React.ReactElement, {\n          id,\n        });\n      }),\n    [props.children],\n  );\n  return (\n    <React.Fragment>\n      {text}\n      <Col\n        style={{\n          paddingTop: 10,\n          paddingBottom: 10,\n          ...props.childrenStyle,\n        }}\n        {...(colProps ? colProps.children : {})}\n      >\n        {children}\n      </Col>\n    </React.Fragment>\n  );\n};\n\nLabel.defaultProps = {};\n\nexport { LabelRow, Label };\n\nexport default memo(Label);\n"],"sourceRoot":""}