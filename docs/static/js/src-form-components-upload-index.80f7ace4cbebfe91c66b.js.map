{"version":3,"sources":["D:/zouwendi/01projectFiles/teaness/src/Form/Components/Upload/index.mdx"],"names":["name","layoutProps","MDXLayout","MDXContent","components","props","mdxType","__position","__code","__scope","this","useContext","useMemo","Playground","Props","Button","Upload","UploadContext","Registry","__codesandbox","maxSize","max","multiple","listType","accept","Demo","create","uploadContext","upload","Promise","r","j","setTimeout","onClick","then","res","console","log","of","parentName","isMDXComponent"],"mappings":"kLAWsBA,E,4XAKhBC,GALgBD,EAIK,OACP,IAGdE,EAAY,UACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACH,EAAD,iBAAeD,EAAiBI,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,uCADR,yCAGA,0MACA,iBAAQ,CACN,GAAM,8HADR,+HAGA,sFACA,YAAC,aAAD,CAAYC,WAAY,EAAGC,OAAQ,wPAAoJC,QAAS,CAC9LJ,MAAOK,KAAOA,KAAKL,MAAQA,EAC3BM,wBACAC,kBACAC,wBACAC,cACAC,WACAC,WACAC,kBACAC,cACCC,cAAa,YAAeb,QAAQ,cAVvC,2BAYF,YAAC,IAAD,CAAQc,QAAS,EAAGd,QAAQ,WAZ1B,uCAcF,YAAC,IAAD,CAAQe,IAAK,EAAGC,UAAQ,EAAChB,QAAQ,WAd/B,2BAgBF,YAAC,IAAD,CAAQiB,SAAS,UAAUjB,QAAQ,WAhBjC,6CAkBF,YAAC,IAAD,CAAQkB,OAAO,UAAUlB,QAAQ,YAE/B,YAAC,aAAD,CAAYC,WAAY,EAAGC,OAAQ,6uBAAorBC,QAAS,CAC9tBJ,MAAOK,KAAOA,KAAKL,MAAQA,EAC3BM,wBACAC,kBACAC,wBACAC,cACAC,WACAC,WACAC,kBACAC,cACCC,cAAa,YAAeb,QAAQ,eACxC,WACK,IAAMmB,EAAOb,mBAAQ,kBAAMI,IAAOU,QAAPV,EAAgB,WACzC,IAAMW,EAAgBhB,qBAAWM,KAQjC,OANAC,IAASU,OAAS,WAChB,OAAO,IAAIC,SAAQ,SAACC,EAAGC,GACrBC,YAAW,kBAAMD,GAAE,KAAQ,SAIxB,uBACX,YAAC,IAAD,CAAQE,QAAS,WACTN,EAAcC,SAASM,MAAK,SAAAC,GAAG,OAAIC,QAAQC,IAAR,mCAAoBF,QACtD7B,QAAQ,UAFjB,oDAGA,YAAC,IAAD,CAAQiB,SAAS,UAAUjB,QAAQ,iBAE7B,IACJ,OAAO,YAACmB,EAAD,CAAMnB,QAAQ,YAGzB,iBAAQ,CACN,GAAM,0BADR,4BAGA,iBAAQ,CACN,GAAM,UADR,UAGA,YAAC,QAAD,CAAOgC,GAAItB,IAAQV,QAAQ,UAC3B,uBAAK,kCAAMiC,WAAW,OAAU,CAC5B,UAAa,gBADZ,8yBA6BL,iBAAQ,CACN,GAAM,UADR,UAGA,YAAC,QAAD,CAAOD,GAAItB,IAAOU,OAAQpB,QAAQ,UAClC,iBAAQ,CACN,GAAM,4BADR,4BAGA,kG,8LAKJH,EAAWqC,gBAAiB","file":"static/js/src-form-components-upload-index.8c025593.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { useContext, useMemo } from 'react';\nimport { Playground, Props } from 'docz';\nimport { Button } from 'antd';\nimport 'antd/dist/antd.css';\nimport Upload, { UploadContext, Registry } from '.';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\nconst Demo = makeShortcode(\"Demo\");\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2 {...{\n      \"id\": \"基本用法basic-usage\"\n    }}>{`基本用法(Basic usage)`}</h2>\n    <p>{`这是一个手动上传的组件,需要先实现 upload 方法全局注册后才可以使用`}</p>\n    <h3 {...{\n      \"id\": \"最简单的上传需要直接上传可以实现-beforeupload-方法\"\n    }}>{`最简单的上传,需要直接上传可以实现 beforeUpload 方法`}</h3>\n    <p>{`继承了 antd upload 的所有属性`}</p>\n    <Playground __position={0} __code={'限制大小\\n<Upload maxSize={1} />\\n限制上传数量\\n<Upload max={1} multiple />\\n展示样式\\n<Upload listType=\\\"picture\\\" />\\n友好的文件提示\\n<Upload accept=\\\"image/*\\\" />'} __scope={{\n      props: this ? this.props : props,\n      useContext,\n      useMemo,\n      Playground,\n      Props,\n      Button,\n      Upload,\n      UploadContext,\n      Registry\n    }} __codesandbox={`undefined`} mdxType=\"Playground\">\n  限制大小\n  <Upload maxSize={1} mdxType=\"Upload\" />\n  限制上传数量\n  <Upload max={1} multiple mdxType=\"Upload\" />\n  展示样式\n  <Upload listType=\"picture\" mdxType=\"Upload\" />\n  友好的文件提示\n  <Upload accept=\"image/*\" mdxType=\"Upload\" />\n    </Playground>\n    <Playground __position={1} __code={'() => {\\n  const Demo = useMemo(\\n    () =>\\n      Upload.create()(() => {\\n        const uploadContext = useContext(UploadContext)\\n        Registry.upload = () => {\\n          return new Promise((r, j) => {\\n            setTimeout(() => j(false), 1000)\\n          })\\n        }\\n        return (\\n          <div>\\n            <Button\\n              onClick={() => {\\n                uploadContext\\n                  .upload()\\n                  .then(res => console.log(`上传成功 ${res}`))\\n              }}\\n            >\\n              手动上传到服务器\\n            </Button>\\n            <Upload listType=\\\"picture\\\" />\\n          </div>\\n        )\\n      }),\\n    [],\\n  )\\n  return <Demo />\\n}'} __scope={{\n      props: this ? this.props : props,\n      useContext,\n      useMemo,\n      Playground,\n      Props,\n      Button,\n      Upload,\n      UploadContext,\n      Registry\n    }} __codesandbox={`undefined`} mdxType=\"Playground\">\n  {() => {\n        const Demo = useMemo(() => Upload.create()(() => {\n          const uploadContext = useContext(UploadContext);\n\n          Registry.upload = () => {\n            return new Promise((r, j) => {\n              setTimeout(() => j(false), 1000);\n            });\n          };\n\n          return <div>\n      <Button onClick={() => {\n              uploadContext.upload().then(res => console.log(`上传成功 ${res}`));\n            }} mdxType=\"Button\">手动上传到服务器</Button>\n      <Upload listType=\"picture\" mdxType=\"Upload\" />\n    </div>;\n        }), []);\n        return <Demo mdxType=\"Demo\" />;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"属性properties\"\n    }}>{`属性(Properties)`}</h2>\n    <h3 {...{\n      \"id\": \"upload\"\n    }}>{`Upload`}</h3>\n    <Props of={Upload} mdxType=\"Props\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`interface UploadProps extends AntUploadProps {\n  /**\n   * 选择图片后触发\n   */\n  onSelect?: (info: UploadChangeParam) => void;\n  /**\n   * 获取信息失败后的回调\n   */\n  getInfoErrorback?: (uid: string, err: any) => void;\n  /**\n   * 获取信息的方法 一般会先从上下文获取,但是这个优先级更高\n   */\n  getFileInfo?: GetFileInfoType;\n  /**\n   * 加载信息时候展示的样式\n   */\n  loading?: React.ReactNode;\n  /**\n   * 文件最大size 单位KB\n   */\n  maxSize?: number;\n    /**\n   * 文件最大数量 单位个\n   */\n  max?: number;\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"create\"\n    }}>{`create`}</h3>\n    <Props of={Upload.create} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"全局配置\"\n    }}>{`全局配置`}</h2>\n    <p>{`可以通过 Upload 目录的 Registry 修改`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}